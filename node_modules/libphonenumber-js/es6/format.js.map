{"version":3,"sources":["../source/format.js"],"names":["matches_entirely","parse_phone_number_and_country_phone_code","get_phone_code","get_formats","get_format_pattern","get_format_format","get_format_leading_digits_patterns","get_format_national_prefix_formatting_rule","get_format_national_prefix_is_optional_when_formatting","get_format_international_format","get_metadata_by_country_phone_code","format","input","third_argument","phone","country","country_metadata","metadata","countries","country_phone_code","number","national_number","format_national_number","FIRST_GROUP_PATTERN","format_national_number_using_format","international","enforce_national_prefix","format_pattern_matcher","RegExp","national_prefix_formatting_rule","national_prefix_may_be_omitted","replace","formatted_number","local_to_international_style","format_as","choose_format_for_number","available_formats","length","last_leading_digits_pattern","search","local","trim"],"mappings":"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","file":"format.js","sourcesContent":["// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of 17th November, 2016.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nimport { matches_entirely } from './common'\n\nimport\n{\n\tparse_phone_number_and_country_phone_code\n}\nfrom './parse'\n\nimport\n{\n\tget_phone_code,\n\tget_formats,\n\tget_format_pattern,\n\tget_format_format,\n\tget_format_leading_digits_patterns,\n\tget_format_national_prefix_formatting_rule,\n\tget_format_national_prefix_is_optional_when_formatting,\n\tget_format_international_format,\n\tget_metadata_by_country_phone_code\n}\nfrom './metadata'\n\nexport default function format(input = '', format, third_argument)\n{\n\t// If the first argument object is expanded\n\tif (typeof input === 'string')\n\t{\n\t\t// If number is passed not as an object\n\t\tif (typeof third_argument === 'string')\n\t\t{\n\t\t\tinput = { phone: input, country: format }\n\t\t\tformat = third_argument\n\t\t}\n\t\telse\n\t\t{\n\t\t\tinput = { phone: input }\n\t\t}\n\t}\n\n\tlet country_metadata\n\n\tif (input.country)\n\t{\n\t\tcountry_metadata = this.metadata.countries[input.country]\n\t}\n\n\tconst { country_phone_code, number } = parse_phone_number_and_country_phone_code(input.phone, this.metadata)\n\n\tif (country_phone_code)\n\t{\n\t\t// Check country restriction\n\t\tif (input.country && country_phone_code !== get_phone_code(country_metadata))\n\t\t{\n\t\t\treturn input.phone\n\t\t}\n\n\t\tcountry_metadata = get_metadata_by_country_phone_code(country_phone_code, this.metadata)\n\t}\n\n\tif (!country_metadata)\n\t{\n\t\treturn input.phone\n\t}\n\n\tswitch (format)\n\t{\n\t\tcase 'International':\n\t\t\tif (!number)\n\t\t\t{\n\t\t\t\treturn `+${get_phone_code(country_metadata)}`\n\t\t\t}\n\t\t\tconst national_number = format_national_number(number, 'International', false, country_metadata)\n\t\t\treturn `+${get_phone_code(country_metadata)} ${national_number}`\n\n\t\tcase 'International_plaintext':\n\t\t\treturn `+${get_phone_code(country_metadata)}${input.phone}`\n\n\t\tcase 'National':\n\t\t\tif (!number)\n\t\t\t{\n\t\t\t\treturn ''\n\t\t\t}\n\t\t\treturn format_national_number(number, 'National', false, country_metadata)\n\t}\n}\n\n// This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly.  Therefore, we use \\d, so that the first\n// group actually used in the pattern will be matched.\nexport const FIRST_GROUP_PATTERN = /(\\$\\d)/\n\nexport function format_national_number_using_format(number, format, international, enforce_national_prefix, country_metadata)\n{\n\tconst format_pattern_matcher = new RegExp(get_format_pattern(format))\n\n\tconst national_prefix_formatting_rule = get_format_national_prefix_formatting_rule(format, country_metadata)\n\n\t// National prefix is omitted if there's no national prefix formatting rule\n\t// set for this country, or when this rule is set but\n\t// national prefix is optional for this phone number format\n\t// (and it is not enforced explicitly)\n\tconst national_prefix_may_be_omitted = !national_prefix_formatting_rule ||\n\t\t(national_prefix_formatting_rule && get_format_national_prefix_is_optional_when_formatting(format, country_metadata) && !enforce_national_prefix)\n\n\tif (!international && !national_prefix_may_be_omitted)\n\t{\n\t\treturn number.replace\n\t\t(\n\t\t\tformat_pattern_matcher,\n\t\t\tget_format_format(format).replace\n\t\t\t(\n\t\t\t\tFIRST_GROUP_PATTERN,\n\t\t\t\tnational_prefix_formatting_rule\n\t\t\t)\n\t\t)\n\t}\n\n\tconst formatted_number = number.replace\n\t(\n\t\tformat_pattern_matcher,\n\t\tinternational ? get_format_international_format(format) : get_format_format(format)\n\t)\n\n\tif (international)\n\t{\n\t\treturn local_to_international_style(formatted_number)\n\t}\n\n\treturn formatted_number\n}\n\nexport function format_national_number(number, format_as, enforce_national_prefix, country_metadata)\n{\n\tconst format = choose_format_for_number(get_formats(country_metadata), number)\n\n\tif (!format)\n\t{\n\t\treturn number\n\t}\n\n\treturn format_national_number_using_format(number, format, format_as === 'International', enforce_national_prefix, country_metadata)\n}\n\nexport function choose_format_for_number(available_formats, national_number)\n{\n\tfor (let format of available_formats)\n\t{\n\t\t// Validate leading digits\n\t\tif (get_format_leading_digits_patterns(format).length > 0)\n\t\t{\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\n\t\t\tconst last_leading_digits_pattern = get_format_leading_digits_patterns(format)[get_format_leading_digits_patterns(format).length - 1]\n\n\t\t\t// If leading digits don't match then move on to the next phone number format\n\t\t\tif (national_number.search(last_leading_digits_pattern) !== 0)\n\t\t\t{\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\t// Check that the national number matches the phone number format regular expression\n\t\tif (matches_entirely(national_number, new RegExp(get_format_pattern(format))))\n\t\t{\n\t\t\treturn format\n\t\t}\n\t}\n}\n\n// Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\nexport function local_to_international_style(local)\n{\n\treturn local\n\t\t// Remove brackets\n\t\t.replace(/[\\(\\)]/g, '')\n\t\t// Replace dashes with spaces\n\t\t.replace(/\\-/g, ' ')\n\t\t.trim()\n}"]}