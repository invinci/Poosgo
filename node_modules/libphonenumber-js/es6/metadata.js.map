{"version":3,"sources":["../source/metadata.js"],"names":["get_phone_code","country_metadata","get_national_number_pattern","get_formats","get_national_prefix","get_national_prefix_formatting_rule","get_national_prefix_for_parsing","national_prefix_for_parsing","get_national_prefix_transform_rule","get_national_prefix_is_optional_when_formatting","get_leading_digits","get_format_pattern","format_array","get_format_format","get_format_leading_digits_patterns","get_format_national_prefix_formatting_rule","get_format_national_prefix_is_optional_when_formatting","get_format_national_prefix_is_mandatory_when_formatting","get_format_international_format","get_metadata_by_country_phone_code","country_phone_code","metadata","country_code","country_phone_code_to_countries","countries","get_types","get_type","index","undefined","get_type_fixed_line","get_type_mobile","get_type_toll_free","get_type_premium_rate","get_type_personal_number","get_type_voice_mail","get_type_uan","get_type_pager","get_type_voip","get_type_shared_cost"],"mappings":"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","file":"metadata.js","sourcesContent":["export function get_phone_code(country_metadata)\n{\n\treturn country_metadata[0]\n}\n\nexport function get_national_number_pattern(country_metadata)\n{\n\treturn country_metadata[1]\n}\n\nexport function get_formats(country_metadata)\n{\n\treturn country_metadata[2] || []\n}\n\nexport function get_national_prefix(country_metadata)\n{\n\treturn country_metadata[3]\n}\n\nexport function get_national_prefix_formatting_rule(country_metadata)\n{\n\treturn country_metadata[4]\n}\n\nexport function get_national_prefix_for_parsing(country_metadata)\n{\n\tlet national_prefix_for_parsing = country_metadata[5]\n\n\t// If `national_prefix_for_parsing` is not set explicitly,\n\t// then infer it from `national_prefix` (if any)\n\tif (!national_prefix_for_parsing)\n\t{\n\t\tnational_prefix_for_parsing = get_national_prefix(country_metadata)\n\t}\n\n\treturn national_prefix_for_parsing\n}\n\nexport function get_national_prefix_transform_rule(country_metadata)\n{\n\treturn country_metadata[6]\n}\n\nexport function get_national_prefix_is_optional_when_formatting(country_metadata)\n{\n\treturn country_metadata[7]\n}\n\nexport function get_leading_digits(country_metadata)\n{\n\treturn country_metadata[8]\n}\n\nexport function get_format_pattern(format_array)\n{\n\treturn format_array[0]\n}\n\nexport function get_format_format(format_array)\n{\n\treturn format_array[1]\n}\n\nexport function get_format_leading_digits_patterns(format_array)\n{\n\treturn format_array[2] || []\n}\n\nexport function get_format_national_prefix_formatting_rule(format_array, country_metadata)\n{\n\treturn format_array[3] || get_national_prefix_formatting_rule(country_metadata)\n}\n\nexport function get_format_national_prefix_is_optional_when_formatting(format_array, country_metadata)\n{\n\treturn format_array[4] || get_national_prefix_is_optional_when_formatting(country_metadata)\n}\n\nexport function get_format_national_prefix_is_mandatory_when_formatting(format_array, country_metadata)\n{\n\t// National prefix is omitted if there's no national prefix formatting rule\n\t// set for this country, or when this rule is set but\n\t// national prefix is optional for this phone number format\n\t// (and it is not enforced explicitly)\n\treturn get_format_national_prefix_formatting_rule(format_array, country_metadata) &&\n\t\t!get_format_national_prefix_is_optional_when_formatting(format_array, country_metadata)\n}\n\nexport function get_format_international_format(format_array)\n{\n\treturn format_array[5] || get_format_format(format_array)\n}\n\n// Formatting information for regions which share\n// a country calling code is contained by only one region\n// for performance reasons. For example, for NANPA region\n// (\"North American Numbering Plan Administration\",\n//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n// it will be contained in the metadata for `US`.\nexport function get_metadata_by_country_phone_code(country_phone_code, metadata)\n{\n\tconst country_code = metadata.country_phone_code_to_countries[country_phone_code][0]\n\treturn metadata.countries[country_code]\n}\n\nexport function get_types(country_metadata)\n{\n\treturn country_metadata[9]\n}\n\nfunction get_type(country_metadata, index)\n{\n\treturn get_types(country_metadata) ? get_types(country_metadata)[index] : undefined\n}\n\nexport function get_type_fixed_line(country_metadata)\n{\n\treturn get_type(country_metadata, 0)\n}\n\nexport function get_type_mobile(country_metadata)\n{\n\treturn get_type(country_metadata, 1)\n}\n\nexport function get_type_toll_free(country_metadata)\n{\n\treturn get_type(country_metadata, 2)\n}\n\nexport function get_type_premium_rate(country_metadata)\n{\n\treturn get_type(country_metadata, 3)\n}\n\nexport function get_type_personal_number(country_metadata)\n{\n\treturn get_type(country_metadata, 4)\n}\n\nexport function get_type_voice_mail(country_metadata)\n{\n\treturn get_type(country_metadata, 5)\n}\n\nexport function get_type_uan(country_metadata)\n{\n\treturn get_type(country_metadata, 6)\n}\n\nexport function get_type_pager(country_metadata)\n{\n\treturn get_type(country_metadata, 7)\n}\n\nexport function get_type_voip(country_metadata)\n{\n\treturn get_type(country_metadata, 8)\n}\n\nexport function get_type_shared_cost(country_metadata)\n{\n\treturn get_type(country_metadata, 9)\n}"]}